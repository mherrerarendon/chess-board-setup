{"version":3,"sources":["components/Square.js","components/Board.js","components/PieceButton.js","components/PieceSelection.js","components/lib/ToggleSwitch/ToggleSwitch.js","App.js","reportWebVitals.js","index.js"],"names":["Square","color","square_id","piece_value","add_piece","className","onClick","Board","board_state","items","i","Math","floor","push","toString","PieceButton","piece_id","set_piece","selected_id","type","id","name","onChange","e","target","value","checked","htmlFor","PieceSelection","selected_piece","piece_components","map","piece_char","ToggleSwitch","optionLabels","small","disabled","tabIndex","onKeyDown","keyCode","preventDefault","handleKeyPress","defaultProps","App","useState","initial_board_values","Array","fill","set_board_state","white_to_start","set_white_to_start","white_king_castle","set_white_king_castle","white_queen_castle","set_white_queen_castle","black_king_castle","set_black_king_castle","black_queen_castle","set_black_queen_castle","fen","set_fen","temp_state","slice","editor","white_king_side_castle","white_queen_side_castle","black_king_side_castle","black_queen_side_castle","squares","then","fen_str","get_fen_wasm","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c28a606e.chunk.js","sourcesContent":["// rafce to create the skeleton\n\nimport React from 'react'\n\nconst Square = ({ color, square_id, piece_value, add_piece }) => {\n    return (\n        <div\n            key={ square_id }\n            className={color}\n            onClick={() => add_piece(square_id)}\n        >\n            {piece_value}\n        </div>\n    )\n}\n\n\nexport default Square\n","import React from 'react'\nimport Square from './Square'\n\nconst Board = ({board_state, add_piece}) => {\n    const items = []\n\n    for (let i = 0; i < 64; i++) {\n        let color = 'white-square';\n        const row = Math.floor(i / 8);\n        if (row % 2 === 0) {\n            color = i % 2 === 1 ? 'dark-square' : 'white-square';\n        } else {\n            color = i % 2 === 1 ? 'white-square' : 'dark-square';\n        }\n        items.push(<Square color={color} key={i.toString()} square_id={i} piece_value={board_state[i]} add_piece={add_piece} />)\n    }\n    return (\n        <div className='board'>\n            {items}\n        </div>\n    )\n}\n\nexport default Board","import React from 'react'\n\nconst PieceButton = ({ piece_id, set_piece, selected_id }) => {\n    return (\n        <div className=\"piece-radio\">\n            <input\n                type=\"radio\" \n                id={piece_id}\n                name=\"piece\" \n                onChange={(e) => set_piece(e.target.value)} \n                value={piece_id}\n                checked={selected_id === piece_id}\n            />\n            <label className=\"piece-label\" htmlFor={piece_id}>{piece_id}</label>\n        </div>\n    )\n}\n\nexport default PieceButton","import React from 'react'\nimport PieceButton from './PieceButton'\n\nconst PieceSelection = ({ selected_piece, set_piece }) => {\n    const pieces = [...\"_♙♖♘♗♕♔♟♜♞♝♛♚\"]\n    const piece_components = pieces.map(piece_char => {\n        return <PieceButton \n                    piece_id={piece_char}\n                    set_piece={set_piece}\n                    selected_id={selected_piece}\n                    key={piece_char}\n                />\n    })\n    return (\n        <div className=\"piece-selection-container\">\n            {piece_components}\n        </div>\n    )\n}\n\nexport default PieceSelection","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './ToggleSwitch.css';\n\n/*\nToggle Switch Component\nNote: id, checked and onChange are required for ToggleSwitch component to function.\nThe props name, small, disabled and optionLabels are optional.\nUsage: <ToggleSwitch id={id} checked={value} onChange={checked => setValue(checked)}} />\n*/\n\nconst ToggleSwitch = ({ id, name, checked, onChange, optionLabels, small, disabled }) => {\n  function handleKeyPress(e){\n    if (e.keyCode !== 32) return;\n\n    e.preventDefault();\n    onChange(!checked)\n  }\n\n  return (\n    <div className={\"toggle-switch\" + (small ? \" small-switch\" : \"\")}>\n      <input\n        type=\"checkbox\"\n        name={name}\n        className=\"toggle-switch-checkbox\"\n        id={id}\n        checked={checked}\n        onChange={e => onChange(e.target.checked)}\n        disabled={disabled}\n        />\n        {id ? (\n          <label className=\"toggle-switch-label\"\n                 htmlFor={id}\n                 tabIndex={ disabled ? -1 : 1 }\n                 onKeyDown={ (e) => { handleKeyPress(e) }}>\n            <span\n              className={\n                disabled\n                  ? \"toggle-switch-inner toggle-switch-disabled\"\n                  : \"toggle-switch-inner\"\n              }\n              data-yes={optionLabels[0]}\n              data-no={optionLabels[1]}\n              tabIndex={-1}\n            />\n            <span\n              className={\n              disabled\n                ? \"toggle-switch-switch toggle-switch-disabled\"\n                : \"toggle-switch-switch\"\n              }\n              tabIndex={-1}\n            />\n          </label>\n        ) : null}\n      </div>\n    );\n}\n\n// Set optionLabels for rendering.\nToggleSwitch.defaultProps = {\n  optionLabels: [\"Yes\", \"No\"],\n};\n\nToggleSwitch.propTypes = {\n  id: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  optionLabels: PropTypes.array,\n  small: PropTypes.bool,\n  disabled: PropTypes.bool\n};\n\nexport default ToggleSwitch;\n","import { useState } from 'react'\nimport './App.scss';\nimport Board from './components/Board';\nimport PieceSelection from './components/PieceSelection';\nimport ToggleSwitch from './components/lib/ToggleSwitch/ToggleSwitch'\n\nfunction App() {\n  const [selected_piece, set_piece] = useState(\"\")\n\n  const initial_board_values = Array(64).fill(\" \");\n  const [board_state, set_board_state] = useState(initial_board_values)\n\n  const [white_to_start, set_white_to_start] = useState(true)\n  const [white_king_castle, set_white_king_castle] = useState(true)\n  const [white_queen_castle, set_white_queen_castle] = useState(true)\n  const [black_king_castle, set_black_king_castle] = useState(true)\n  const [black_queen_castle, set_black_queen_castle] = useState(true)\n  const [fen, set_fen] = useState(\"\")\n\n  const add_piece = (square_id) => {\n    const piece_char = selected_piece === \"_\" ? \" \" : selected_piece;\n    var temp_state = board_state.slice()\n    temp_state[square_id] = piece_char\n    set_board_state(temp_state)\n  }\n\n  const on_get_fen = () => {\n    const editor = {\n      white_to_start: white_to_start,\n      white_king_side_castle: white_king_castle,\n      white_queen_side_castle: white_queen_castle,\n      black_king_side_castle: black_king_castle,\n      black_queen_side_castle: black_queen_castle,\n      squares: board_state\n    }\n    import('fen').then(fen => {\n      let fen_str = fen.get_fen_wasm(JSON.stringify(editor))\n      set_fen(fen_str)\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-container\">\n        <Board\n          board_state={board_state}\n          add_piece={add_piece}\n        />\n        <PieceSelection \n          selected_piece={selected_piece}\n          set_piece={set_piece}\n        />\n      </div>\n      <div className=\"options-container\">\n        <div>\n          <ToggleSwitch id=\"starting-color\" checked={white_to_start} onChange={checked => set_white_to_start(checked)} />\n          <label htmlFor=\"starting-color\">White to start</label>\n        </div>\n        <div className=\"castling-rights-container\">\n          <h2>White Castling Rights</h2>\n          <div>\n            <ToggleSwitch id=\"white-king-castle-rights\" checked={white_king_castle} onChange={checked => set_white_king_castle(checked)} />\n            <label htmlFor=\"white-king-castle-rights\">King side</label>\n          </div>\n          <br />\n          <div>\n            <ToggleSwitch id=\"white-queen-castle-rights\" checked={white_queen_castle} onChange={checked => set_white_queen_castle(checked)} />\n            <label htmlFor=\"white-queen-castle-rights\">Queen side</label>\n          </div>\n        </div>\n        <div className=\"castling-rights-container\">\n          <h2>Black Castling Rights</h2>\n          <div>\n            <ToggleSwitch id=\"black-king-castle-rights\" checked={black_king_castle} onChange={checked => set_black_king_castle(checked)} />\n            <label htmlFor=\"black-king-castle-rights\">King side</label>\n          </div>\n          <br />\n          <div>\n            <ToggleSwitch id=\"black-queen-castle-rights\" checked={black_queen_castle} onChange={checked => set_black_queen_castle(checked)} />\n            <label htmlFor=\"black-queen-castle-rights\">Queen side</label>\n          </div>\n        </div>\n        <button onClick={on_get_fen}>Get FEN</button>\n      </div>\n      <div className=\"fen-container\">\n        <p>{fen}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}