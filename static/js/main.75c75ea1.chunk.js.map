{"version":3,"sources":["components/Square.js","components/Board.js","components/PieceButton.js","components/PieceSelection.js","App.js","reportWebVitals.js","index.js"],"names":["Square","color","square","style","backgroundColor","className","Board","items","i","Math","floor","push","PieceButton","piece_char","id","type","class","for","PieceSelection","white","onToggleColor","onClick","App","useState","set_white","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAceA,EAVA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACrB,OACI,qBACIC,MAAO,CAAEC,gBAAiBH,GAC1B,YAAW,CAAEC,UACbG,UAAU,YCcPC,EApBD,WAGV,IAFA,IAAMC,EAAQ,GAELC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAIP,EAAQ,QAGRA,EAFQQ,KAAKC,MAAMF,EAAI,GACjB,IAAM,EACJA,EAAI,IAAM,EAAI,QAAU,QAExBA,EAAI,IAAM,EAAI,QAAU,QAEpCD,EAAMI,KAAK,cAAC,EAAD,CAAQV,MAAOA,EAAO,YAAWO,KAEhD,OACI,qBAAKH,UAAU,QAAf,SACKE,KCPEK,EATK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACnB,OACI,qCACI,uBAAOC,GAAG,eAAeC,KAAK,UAC9B,uBAAOC,MAAM,qBAAqBC,IAAI,eAAtC,SAAsDJ,QCWnDK,EAdQ,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAC7B,OACI,sBAAKJ,MAAM,iBAAX,UACI,wBAAQD,KAAK,SAASM,QAASD,EAA/B,0BACA,cAAC,EAAD,CAAaP,WAAYM,EAAQ,SAAM,uBACvC,cAAC,EAAD,CAAaN,WAAYM,EAAQ,SAAM,WACvC,cAAC,EAAD,CAAaN,WAAYM,EAAQ,SAAM,WACvC,cAAC,EAAD,CAAaN,WAAYM,EAAQ,SAAM,WACvC,cAAC,EAAD,CAAaN,WAAYM,EAAQ,SAAM,WACvC,cAAC,EAAD,CAAaN,WAAYM,EAAQ,SAAM,eCQpCG,MAff,WACE,MAA2BC,oBAAS,GAApC,mBAAOJ,EAAP,KAAcK,EAAd,KAMA,OACE,sBAAKnB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAgBc,MAAOA,EAAOC,cAPd,WAClBK,QAAQC,IAAI,kBACZF,GAAWL,UCEAQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.75c75ea1.chunk.js","sourcesContent":["// rafce to create the skeleton\n\nimport React from 'react'\n\nconst Square = ({ color, square }) => {\n    return (\n        <div\n            style={{ backgroundColor: color }}\n            square-id={{ square }}\n            className='square' />\n    )\n}\n\n\nexport default Square\n","import React from 'react'\nimport Square from './Square'\n\nconst Board = () => {\n    const items = []\n\n    for (let i = 0; i < 64; i++) {\n        let color = 'white';\n        const row = Math.floor(i / 8);\n        if (row % 2 === 0) {\n            color = i % 2 === 1 ? 'black' : 'white';\n        } else {\n            color = i % 2 === 1 ? 'white' : 'black';\n        }\n        items.push(<Square color={color} square-id={i} />)\n    }\n    return (\n        <div className='board'>\n            {items}\n        </div>\n    )\n}\n\nexport default Board","import React from 'react'\n\nconst PieceButton = ({ piece_char }) => {\n    return (\n        <>\n            <input id=\"piece_button\" type=\"radio\" />\n            <label class=\"piece_button_class\" for=\"piece_button\">{piece_char}</label>\n        </>\n    )\n}\n\nexport default PieceButton\n","import React from 'react'\nimport PieceButton from './PieceButton'\n\nconst PieceSelection = ({ white, onToggleColor }) => {\n    return (\n        <div class=\"piece-selector\">\n            <button type=\"button\" onClick={onToggleColor}>Toggle Color</button >\n            <PieceButton piece_char={white ? \"♙\" : \"♟️️\"} />\n            <PieceButton piece_char={white ? \"♖\" : \"♜\"} />\n            <PieceButton piece_char={white ? \"♘\" : \"♞\"} />\n            <PieceButton piece_char={white ? \"♗\" : \"♝\"} />\n            <PieceButton piece_char={white ? \"♕\" : \"♛\"} />\n            <PieceButton piece_char={white ? \"♔\" : \"♚\"} />\n        </div>\n    )\n}\n\nexport default PieceSelection","import { useState } from 'react'\nimport './App.css';\nimport Board from './components/Board';\nimport PieceSelection from './components/PieceSelection';\n\nfunction App() {\n  const [white, set_white] = useState(true)\n\n  const toggleColor = () => {\n    console.log('toggling color')\n    set_white(!white)\n  }\n  return (\n    <div className=\"App\">\n      <Board />\n      <PieceSelection white={white} onToggleColor={toggleColor} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}